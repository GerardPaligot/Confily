import kotlin.collections.List;

CREATE TABLE Partner (
id TEXT NOT NULL PRIMARY KEY,
name TEXT NOT NULL,
description TEXT NOT NULL,
event_id TEXT NOT NULL,
type_id TEXT NOT NULL,
type TEXT NOT NULL,
logo_url TEXT NOT NULL,
site_url TEXT,
twitter_url TEXT,
twitter_message TEXT,
linkedin_url TEXT,
linkedin_message TEXT,
formatted_address TEXT AS List<String>,
address TEXT,
latitude REAL,
longitude REAL
);

CREATE TABLE PartnerType (
order_ INTEGER NOT NULL,
name TEXT NOT NULL PRIMARY KEY,
event_id TEXT NOT NULL
);

CREATE TABLE Job (
url TEXT NOT NULL PRIMARY KEY,
partner_id TEXT NOT NULL,
event_id TEXT NOT NULL,
title TEXT NOT NULL,
company_name TEXT NOT NULL,
location TEXT NOT NULL,
salary_min INTEGER,
salary_max INTEGER,
salary_recurrence TEXT,
requirements REAL NOT NULL,
publish_date INTEGER NOT NULL,
propulsed TEXT NOT NULL
);

insertPartnerType:
INSERT OR REPLACE INTO PartnerType(
order_, name, event_id
) VALUES (?, ?, ?);

insertPartner:
INSERT OR REPLACE INTO Partner(
id, name, description, event_id, type_id, type, logo_url, site_url, twitter_url, twitter_message, linkedin_url, linkedin_message, formatted_address, address, latitude, longitude
) VALUES (?, ?,?,?, ?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertJob:
INSERT OR REPLACE INTO Job(
url, partner_id, event_id, title, company_name, location, salary_min, salary_max, salary_recurrence, requirements, publish_date, propulsed
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

selectPartnerTypes:
SELECT order_, name FROM PartnerType WHERE event_id == ? ORDER BY order_ ASC;

selectPartners:
SELECT id, name, description, logo_url, site_url, twitter_url, twitter_message, linkedin_url, linkedin_message, formatted_address, address, latitude, longitude FROM Partner WHERE event_id == ? AND type_id == ? ORDER BY name ASC;

selectPartner:
SELECT id, name, description, logo_url, site_url, twitter_url, twitter_message, linkedin_url, linkedin_message, formatted_address, address, latitude, longitude FROM Partner WHERE event_id == ? AND id == ? ORDER BY name ASC;

selectJobs:
SELECT url, partner_id, event_id, title, company_name, location, salary_min, salary_max, salary_recurrence, requirements, publish_date, propulsed FROM Job WHERE event_id == ? AND partner_id == ? ORDER BY publish_date ASC;
