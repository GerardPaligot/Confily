import kotlin.collections.List;
import kotlin.String;

CREATE TABLE Partner (
id TEXT NOT NULL PRIMARY KEY,
name TEXT NOT NULL,
description TEXT NOT NULL,
logo_url TEXT NOT NULL,
formatted_address TEXT AS List<String>,
address TEXT,
latitude REAL,
longitude REAL,
event_id TEXT NOT NULL,
FOREIGN KEY (event_id) REFERENCES Event(id)
);

CREATE TABLE PartnerType (
order_ INTEGER NOT NULL,
name TEXT NOT NULL PRIMARY KEY,
event_id TEXT NOT NULL,
FOREIGN KEY (event_id) REFERENCES Event(id)
);

CREATE TABLE PartnerAndType (
id TEXT NOT NULL PRIMARY KEY,
partner_id TEXT NOT NULL,
sponsor_id TEXT NOT NULL,
event_id TEXT NOT NULL,
FOREIGN KEY (partner_id) REFERENCES Partner(id),
FOREIGN KEY (sponsor_id) REFERENCES PartnerType(name),
FOREIGN KEY (event_id) REFERENCES Event(id)
);

CREATE TABLE PartnerActivity (
id TEXT NOT NULL PRIMARY KEY,
name TEXT NOT NULL,
date TEXT NOT NULL,
start_time TEXT NOT NULL,
end_time TEXT,
partner_id TEXT NOT NULL,
event_id TEXT NOT NULL,
FOREIGN KEY (partner_id) REFERENCES Partner(id),
FOREIGN KEY (event_id) REFERENCES Event(id)
);

CREATE TABLE Job (
url TEXT NOT NULL PRIMARY KEY,
title TEXT NOT NULL,
company_name TEXT NOT NULL,
location TEXT NOT NULL,
salary_min INTEGER,
salary_max INTEGER,
salary_recurrence TEXT,
requirements REAL NOT NULL,
publish_date INTEGER NOT NULL,
propulsed TEXT NOT NULL,
partner_id TEXT NOT NULL,
event_id TEXT NOT NULL,
FOREIGN KEY (partner_id) REFERENCES Partner(id),
FOREIGN KEY (event_id) REFERENCES Event(id)
);

insertPartnerType:
INSERT OR REPLACE INTO PartnerType(
order_, name, event_id
) VALUES (?, ?, ?);

insertPartner:
INSERT OR REPLACE INTO Partner(
id, name, description, event_id, logo_url, formatted_address, address, latitude, longitude
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

insertPartnerAndType:
INSERT OR REPLACE INTO PartnerAndType(id, partner_id, sponsor_id, event_id)
VALUES (?, ?, ?, ?);

insertPartnerActivity:
INSERT OR REPLACE INTO PartnerActivity(id, name, date, start_time, end_time, partner_id, event_id)
VALUES (?, ?, ?, ?, ?, ?, ?);

insertJob:
INSERT OR REPLACE INTO Job(
url, partner_id, event_id, title, company_name, location, salary_min, salary_max, salary_recurrence, requirements, publish_date, propulsed
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

selectPartnerTypes:
SELECT order_, name FROM PartnerType WHERE event_id == ? ORDER BY order_ ASC;

selectPartners:
SELECT Partner.id, Partner.name, Partner.logo_url
FROM PartnerAndType
INNER JOIN Partner ON PartnerAndType.partner_id = Partner.id
INNER JOIN PartnerType ON PartnerAndType.sponsor_id = PartnerType.name
WHERE PartnerType.name == ? AND PartnerAndType.event_id == ?
ORDER BY Partner.name ASC;

selectPartner:
SELECT id, name, description, logo_url, formatted_address, address, latitude, longitude
FROM Partner
WHERE event_id == ? AND id == ?
ORDER BY name ASC;

selectPartnerActivities:
SELECT PartnerActivity.name, PartnerActivity.start_time, PartnerActivity.end_time, Partner.name
FROM PartnerActivity
INNER JOIN Partner ON PartnerActivity.partner_id = Partner.id
WHERE PartnerActivity.event_id == ? AND PartnerActivity.date = ?
ORDER BY PartnerActivity.start_time ASC;

selectPartnerActivitiesByPartner:
SELECT PartnerActivity.name, PartnerActivity.start_time, PartnerActivity.end_time, Partner.name
FROM PartnerActivity
INNER JOIN Partner ON PartnerActivity.partner_id = Partner.id
WHERE PartnerActivity.event_id == ? AND PartnerActivity.partner_id == ?
ORDER BY PartnerActivity.start_time ASC;

selectJobs:
SELECT url, partner_id, event_id, title, company_name, location, salary_min, salary_max, salary_recurrence, requirements, publish_date, propulsed
FROM Job
WHERE event_id == ? AND partner_id == ?
ORDER BY publish_date ASC;
