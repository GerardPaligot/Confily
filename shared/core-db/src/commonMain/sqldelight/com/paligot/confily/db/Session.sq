import kotlin.Boolean;

CREATE TABLE TalkSession (
id TEXT NOT NULL PRIMARY KEY,
event_id TEXT NOT NULL,
title TEXT NOT NULL,
abstract TEXT NOT NULL,
level TEXT,
language TEXT,
slide_url TEXT,
replay_url TEXT,
open_feedback_url TEXT,
format_id TEXT NOT NULL,
is_favorite INTEGER AS Boolean NOT NULL DEFAULT 0,
FOREIGN KEY (format_id) REFERENCES Format(id),
FOREIGN KEY (event_id) REFERENCES Event(id)
);

CREATE TABLE TalkSessionWithSpeakers(
id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
speaker_id TEXT NOT NULL,
talk_id TEXT NOT NULL,
event_id TEXT NOT NULL,
FOREIGN KEY (speaker_id) REFERENCES Speaker(id),
FOREIGN KEY (talk_id) REFERENCES TalkSession(id)
);

CREATE UNIQUE INDEX TalkSessionWithSpeakersIndex ON TalkSessionWithSpeakers(speaker_id, talk_id, event_id);

selectSessions:
SELECT TalkSession.id, TalkSession.event_id, TalkSession.is_favorite,TalkSession.title,
TalkSession.abstract, TalkSession.level, TalkSession.language, TalkSession.slide_url,
TalkSession.replay_url, TalkSession.open_feedback_url, SessionCategory.category_id,
Schedule.order_, Schedule.start_time, Schedule.end_time, Schedule.room,
Category.name AS categoryName, Category.color AS categoryColor,
Category.icon AS categoryIcon, TalkSession.format_id, Format.name AS formatName, Format.time
FROM TalkSession
INNER JOIN SessionCategory ON SessionCategory.session_id = TalkSession.id
INNER JOIN Category ON SessionCategory.category_id = Category.id
INNER JOIN Format ON TalkSession.format_id = Format.id
INNER JOIN Schedule ON Schedule.session_id = TalkSession.id
WHERE TalkSession.event_id = ?
ORDER BY Schedule.start_time, Schedule.order_;

countSessionsByFavorite:
SELECT count(*) FROM TalkSession WHERE event_id == ? AND is_favorite == ?;

selectSessionByTalkId:
SELECT TalkSession.id, Schedule.order_, TalkSession.event_id, Schedule.start_time, Schedule.end_time, Schedule.room, TalkSession.is_favorite,
TalkSession.id, TalkSession.title, TalkSession.abstract, TalkSession.level, TalkSession.language, TalkSession.slide_url, TalkSession.replay_url, TalkSession.open_feedback_url,
SessionCategory.category_id, Category.name AS categoryName, Category.color AS categoryColor, Category.icon AS categoryIcon,
TalkSession.format_id, Format.name AS formatName, Format.time
FROM TalkSession
INNER JOIN SessionCategory ON SessionCategory.session_id = TalkSession.id
INNER JOIN Category ON SessionCategory.category_id = Category.id
INNER JOIN Format ON TalkSession.format_id = Format.id
INNER JOIN Schedule ON Schedule.session_id = TalkSession.id
WHERE TalkSession.event_id = ? AND TalkSession.id = ?;

selectSpeakersByTalkId:
SELECT Speaker.id, Speaker.display_name, Speaker.pronouns, Speaker.bio, Speaker.job_title, Speaker.company,
Speaker.photo_url
FROM TalkSessionWithSpeakers
INNER JOIN Speaker ON TalkSessionWithSpeakers.speaker_id = Speaker.id
WHERE TalkSessionWithSpeakers.event_id = ? AND TalkSessionWithSpeakers.talk_id = ?;

selectSpeakersByTalkIds:
SELECT Speaker.id, Speaker.display_name, Speaker.photo_url, Speaker.job_title, Speaker.company,
TalkSessionWithSpeakers.talk_id
FROM TalkSessionWithSpeakers
INNER JOIN Speaker ON TalkSessionWithSpeakers.speaker_id = Speaker.id
WHERE TalkSessionWithSpeakers.event_id = ? AND TalkSessionWithSpeakers.talk_id IN ?;

selectTalksBySpeakerId:
SELECT TalkSession.id, TalkSession.title, TalkSession.abstract, TalkSession.level, TalkSession.language,
TalkSession.slide_url, TalkSession.replay_url, TalkSession.open_feedback_url,
Schedule.order_, Schedule.start_time, Schedule.end_time, Schedule.room, TalkSession.is_favorite,
SessionCategory.category_id, Category.name AS categoryName, Category.color AS categoryColor, Category.icon AS categoryIcon,
TalkSession.format_id, Format.name AS formatName, Format.time
FROM TalkSessionWithSpeakers
INNER JOIN TalkSession ON TalkSessionWithSpeakers.talk_id = TalkSession.id
INNER JOIN SessionCategory ON SessionCategory.session_id = TalkSession.id
INNER JOIN Category ON SessionCategory.category_id = Category.id
INNER JOIN Format ON TalkSession.format_id = Format.id
INNER JOIN Schedule ON Schedule.session_id = TalkSession.id
WHERE TalkSessionWithSpeakers.event_id = ? AND TalkSessionWithSpeakers.speaker_id = ?;

markAsFavorite:
UPDATE TalkSession SET is_favorite = ? WHERE id == ? AND event_id == ?;

upsertTalkSession:
INSERT OR REPLACE INTO TalkSession VALUES ?;

upsertTalkWithSpeakersSession:
INSERT OR REPLACE INTO TalkSessionWithSpeakers(speaker_id, talk_id, event_id) VALUES ?;

diffTalkSessions:
SELECT id
FROM TalkSession
WHERE event_id == ? AND id NOT IN ?;

deleteTalkSessions:
DELETE FROM TalkSession WHERE event_id == ? AND id IN ?;

diffTalkWithSpeakers:
SELECT talk_id
FROM TalkSessionWithSpeakers
WHERE event_id == ? AND talk_id NOT IN ?;

deleteTalkWithSpeakers:
DELETE FROM TalkSessionWithSpeakers WHERE event_id == ? AND talk_id IN ?;

diffSessions:
SELECT id
FROM TalkSession
WHERE event_id == ? AND id NOT IN ?;

deleteSessions:
DELETE FROM TalkSession WHERE event_id == ? AND id IN ?;
