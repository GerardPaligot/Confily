import kotlin.collections.List;
import kotlin.Boolean;
import kotlin.String;

CREATE TABLE Event (
id TEXT NOT NULL PRIMARY KEY,
name TEXT NOT NULL,
formatted_address TEXT AS List<String> NOT NULL,
address TEXT NOT NULL,
latitude REAL NOT NULL,
longitude REAL NOT NULL,
date TEXT NOT NULL,
start_date TEXT NOT NULL,
end_date TEXT NOT NULL,
coc TEXT,
openfeedback_project_id TEXT,
contact_email TEXT,
contact_phone TEXT,
faq_url TEXT NOT NULL,
coc_url TEXT NOT NULL,
updated_at INTEGER NOT NULL
);

CREATE TABLE EventItem (
id TEXT NOT NULL PRIMARY KEY,
name TEXT NOT NULL,
date TEXT NOT NULL,
timestamp INTEGER NOT NULL,
past INTEGER AS Boolean NOT NULL DEFAULT 0
);

insertEvent:
INSERT OR REPLACE INTO Event(
id, name, formatted_address, address, latitude, longitude, date, start_date, end_date, coc,
openfeedback_project_id, contact_email, contact_phone, faq_url, coc_url, updated_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

selectEvent:
SELECT id, name, formatted_address, address, latitude, longitude, date, start_date, end_date, coc,
contact_email, contact_phone, faq_url, coc_url, updated_at
FROM Event
WHERE id == ?;

selectOpenfeedbackProjectId:
SELECT openfeedback_project_id FROM Event WHERE id == ?;

selectCoc:
SELECT coc_url, coc, contact_email, contact_phone FROM Event WHERE id == ?;

insertEventItem:
INSERT OR REPLACE INTO EventItem(id, name, date, timestamp, past) VALUES (?, ?, ?, ?, ?);

selectEventItem:
SELECT id, name, date, timestamp, past FROM EventItem WHERE past == ? ORDER BY timestamp DESC;
